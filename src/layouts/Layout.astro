---
import NavList from "../components/Header/NavList.tsx";
import Logo from "../components/Header/Logo.tsx";
import Button from "../components/Button.tsx";
import { ViewTransitions } from "astro:transitions";
import Toggle from "../components/Toggle.astro";

interface Props {
  title: string;
}

const { title } = Astro.props;
const menu = [
  { name: "Overview", href: "/" },
  { name: "Social", href: "/" },
  { name: "Licence", href: "/" },
];
---

<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <link rel="stylesheet" href="/base.css" />
    <script type="module" src="/base.js"></script>
    <script type="module" src="https://unpkg.com/lenis@1.1.3/dist/lenis.min.js"
    ></script>
    <title>{title}</title>
    <!-- <ViewTransitions /> -->
  </head>
  <body class="dark:bg-neutral-100 bg-neutral-900">
    <div class="h-full flex flex-col lg:flex-row p-3">
      <!-- Static sidebar for desktop -->

      <!-- Toggle Button -->

      <div
        class="z-50 bg-white dark:bg-neutral-900 lg:flex flex-1 min-w-72 lg:flex-row md:inset-y-0 border-r border-neutral-700"
      >
        <div
          class="text-white lg:justify-around py-3 flex flex-col w-full lg:bg-transparent dark:bg-neutral-950 dark:lg:bg-transparent bg-neutral-900 justify-center"
        >
          <!-- Logo -->
          <Logo />

          <!-- Menu -->
          <NavList />

          <!-- Download CV -->
          <div class="border-t border-neutral-700 px-5 hidden lg:block">
            <Button href="/AMANGOUA.pdf" target="_blank">
              Download CV
              <span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke-width="1"
                  stroke="currentColor"
                  class="size-4"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3"
                  ></path>
                </svg>
              </span>
            </Button>
          </div>
        </div>
      </div>

      <!-- Main -->
      <section
        class="w-full h-full overflow-y-scroll content inset-y-0 text-white bg-white dark:bg-neutral-900"
      >
        <div class="max-w-[900px] lg:mt-16 mt-20 lg:ml-28 p-2">
          <slot />
        </div>
        <!-- Footer -->
        <div class="border-t border-neutral-700 w-full"></div>
        <Toggle client:idle />

        <div
          class="mx-auto lg:m-5 lg:ml-28 max-w-4xl flex justify-between lg:flex-row flex-col items-center"
        >
          <p class="lg:text-sm p-2 text-base text-neutral-500 font-normal">
            Â© Copyright 2024. Designed and built by Amangoua.
          </p>
          <div
            class="flex font-extralight text-sm dark:text-yellow-200 text-neutral-900"
          >
            UTC +00 :
            <span id="datetime" class="px-2" transition:persist> </span>
          </div>
        </div>
      </section>
    </div>

    <style is:global>
      body {
        margin: 0;
        padding: 0;
        line-height: inherit;
        box-sizing: border-box;
        height: 100vh;
        -webkit-font-smoothing: antialiased;
        scrollbar-width: none;
        overflow: hidden;
      }

      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        -moz-tab-size: 4;
        -o-tab-size: 4;
        tab-size: 4;
        font-feature-settings: normal;
        font-variation-settings: normal;
        -webkit-tap-highlight-color: transparent;
      }

      * {
        scrollbar-width: thin;
        scrollbar-color: rgb(64, 64, 64) transparent;
      }
    </style>
    <script is:inline>
      const updateDateTime = () => {
        // create a new `Date` object
        const now = new Date();

        // get the current date and time as a string
        const currentDateTime = now
          .toLocaleString("fr-FR", {
            timeZone: "UTC",
            timeStyle: "long",
          })
          .slice(0, 8);
        document.querySelector("#datetime").textContent = currentDateTime;
      };
      // call the `updateDateTime` function every second
      setInterval(updateDateTime, 1000);

      let themeToggleDarkIcon = document.getElementById(
        "theme-toggle-dark-icon"
      );
      let themeToggleLightIcon = document.getElementById(
        "theme-toggle-light-icon"
      );

      // Change the icons inside the button based on previous settings
      if (
        localStorage.getItem("color-theme") === "dark" ||
        (!("color-theme" in localStorage) &&
          window.matchMedia("(prefers-color-scheme: dark)").matches)
      ) {
        themeToggleLightIcon.classList.remove("hidden");
      } else {
        themeToggleDarkIcon.classList.remove("hidden");
      }
    </script>
  </body>
</html>
